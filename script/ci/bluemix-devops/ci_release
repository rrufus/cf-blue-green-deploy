#!/bin/bash
set -e -x

# Create a git tag and push the tags


  if [ $DRY_RUN ]; then
    cmd_modifier="echo 'Would have run -- '"
  fi


GIT_URL=`cat artefacts/.gitorigin`
mkdir prerelease
pushd prerelease
  git clone $GIT_URL
  cd cf-blue-green-deploy
  
  TAG=v${PLUGIN_VERSION}
  NAME="Version ${PLUGIN_VERSION}"
  # TODO it would, of course, be nicer not to hardcode the repo name, and we should be able to work it out
  REPO="bluemixgaragelondon/cf-blue-green-deploy"
  git tag ${TAG}
  ${cmd_modifier} git push --tags

    # Upload the binaries the git release

    # Create a git release using the tag

    description=`cat .releaseDescription`
    payload=$(
      jq --null-input \
        --arg tag "$TAG" \
        --arg name "$NAME" \
        --arg body "$description" \
        '{ tag_name: $tag, name: $name, body: $body, draft: true }'
    )

    response=$(
      ${cmd_modifier} curl --fail \
          --netrc \
          --silent \
          --location \
          --data "$payload" \
          "https://api.github.com/repos/${REPO}/releases"
    )

    upload_url="$(echo "$response" | jq -r .upload_url | sed -e "s/{?name,label}//")"

    echo "binaries:" > example-index.yml

    ARTEFACT_DIRECTORY=../../artefacts  
    find $ARTEFACT_DIRECTORY -type f ! -iname '.*' | while read binary_path
    do
      binary_name=${binary_path##*/}
      binary_target=${binary_name#*.}

      sha1=$(shasum "${binary_path}" | awk '{print $1}')
      
      ${cmd_modifier} curl --netrc \
              --header "Content-Type:application/gzip" \
              --data-binary "@$file" \
              "$upload_url?name=$(basename "$file")"

      # Output suitable json for pasting into the cli plugin repo 
      echo "checksum: ${sha}" >> example-index.yml
      echo "platform: ${binary_target}" >> example-index.yml
      echo "url: $upload_url-TODO-${binary_name}" >> example-index.yml

    done

    echo "----- The following would be suitable to paste into repo-index.yml -----"
    cat example-index.yml
popd
git clone https://github.com/fsaintjacques/semver-tool
pushd semver-tool
  git checkout tags/1.2.1
popd

pushd prerelease/cf-blue-green-deploy
  # Bump the stored version 
  next_version=`../semver-tool/src/semver bump minor $PLUGIN_VERSION`
  ../semver-tool/src/semver bump prerel rc1 $next_version > .version
  git add .version
  # Clear the stored release description 
  echo 'New release description here' > .releaseDescription
  git add .releaseDescription
  git commit -m "Auto release prep."
  ${cmd_modifier} git push
popd

